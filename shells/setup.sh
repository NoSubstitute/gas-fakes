#!/bin/bash

echo "Welcome to the gas-fakes setup script!"
echo "This will help you create your .env file."
echo ""

# Find the project root directory relative to the script's location
# This makes the script runnable from any directory
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
ROOT_DIRECTORY=$( cd -- "$SCRIPT_DIR/.." &> /dev/null && pwd )
ENV_FILE="$ROOT_DIRECTORY/.env"

# Initialize variables for existing values
existing_gcp_project_id=""
existing_drive_test_file_id=""
existing_client_credential_file=""
existing_ac="default"
existing_default_scopes="https://www.googleapis.com/auth/userinfo.email,openid,https://www.googleapis.com/auth/cloud-platform"
existing_extra_scopes=",https://www.googleapis.com/auth/drive,https://www.googleapis.com/auth/spreadsheets,https://www.googleapis.com/auth/gmail.labels"
existing_log_destination="CONSOLE"
created_new_file=false

if [ -f "$ENV_FILE" ]; then
  # Source the file to get existing values, removing quotes for the default prompt
  # The '|| true' prevents the script from exiting if a variable is unbound
  # We source it directly, then use parameter expansion to fill our 'existing_'
  # variables, falling back to the initial defaults if they are not set in the file.
  source "$ENV_FILE" || true
  existing_gcp_project_id="${GCP_PROJECT_ID:-$existing_gcp_project_id}"
  existing_drive_test_file_id="${DRIVE_TEST_FILE_ID:-$existing_drive_test_file_id}"
  existing_client_credential_file="${CLIENT_CREDENTIAL_FILE:-$existing_client_credential_file}"
  existing_ac="${AC:-$existing_ac}"
  existing_default_scopes="${DEFAULT_SCOPES:-$existing_default_scopes}"
  existing_extra_scopes="${EXTRA_SCOPES:-$existing_extra_scopes}"
  existing_log_destination="${LOG_DESTINATION:-$existing_log_destination}"

  read -p "An existing .env file was found. Do you want to overwrite it? (y/n) " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then # If user says no to overwriting
    read -p "Would you like to create a '.env.new' file instead for you to merge later? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      ENV_FILE="$ROOT_DIRECTORY/.env.new"
      echo "Okay, a new file will be created at $ENV_FILE"
      created_new_file=true
      # The existing .env values will be used as defaults for the new file.
    else
      echo "Setup cancelled."
      exit 1
    fi
  fi
fi

echo "Creating a new file at $ENV_FILE..."
echo ""

# Prompt for GCP_PROJECT_ID (mandatory)
read -p "Enter your Google Cloud Project ID [${existing_gcp_project_id}]: " gcp_project_id
gcp_project_id=${gcp_project_id:-$existing_gcp_project_id}
while [ -z "$gcp_project_id" ]; do
  read -p "Project ID is required. Please enter your Google Cloud Project ID: " gcp_project_id
done

# Prompt for DRIVE_TEST_FILE_ID (optional)
read -p "Enter a Drive file ID for testing (optional) [${existing_drive_test_file_id}]: " drive_test_file_id
drive_test_file_id=${drive_test_file_id:-$existing_drive_test_file_id}

# Prompt for CLIENT_CREDENTIAL_FILE (optional)
read -p "Enter the path to your OAuth client credentials JSON file (optional) [${existing_client_credential_file}]: " client_credential_file
client_credential_file=${client_credential_file:-$existing_client_credential_file}

# Prompt for other .env values
read -p "Enter the gcloud config name (AC) [${existing_ac}]: " ac
ac=${ac:-$existing_ac}

read -p "Enter the default scopes [${existing_default_scopes}]: " default_scopes
default_scopes=${default_scopes:-$existing_default_scopes}

read -p "Enter any extra scopes (comma-prefixed) [${existing_extra_scopes}]: " extra_scopes
extra_scopes=${extra_scopes:-$existing_extra_scopes}

read -p "Enter the log destination (CONSOLE, CLOUD, BOTH, NONE) [${existing_log_destination}]: " log_destination
log_destination=${log_destination:-$existing_log_destination}
while [[ ! "$log_destination" =~ ^(CONSOLE|CLOUD|BOTH|NONE)$ ]]; do
  read -p "Invalid value. Please enter CONSOLE, CLOUD, BOTH, or NONE: " log_destination
done

# Write to .env file
cat > "$ENV_FILE" << EOL
# gas-fakes environment configuration
# Generated by setup.sh on $(date)

GCP_PROJECT_ID="$gcp_project_id"

# Optional file ID for testing authentication
DRIVE_TEST_FILE_ID="$drive_test_file_id"

# Optional path to OAuth client credentials for restricted scopes
CLIENT_CREDENTIAL_FILE="$client_credential_file"

# Default values for Application Default Credentials
AC="$ac"
DEFAULT_SCOPES="$default_scopes"
EXTRA_SCOPES="$extra_scopes"
LOG_DESTINATION="$log_destination"
EOL

echo ""
echo "File created successfully at $ENV_FILE"

if [ "$created_new_file" = true ]; then
  echo "IMPORTANT: Please manually merge the contents of '.env.new' into your existing '.env' file."
  echo "After merging, you can run 'bash setaccount.sh' to apply the new settings."
else
  echo "You can now run 'bash setaccount.sh' to log in."
fi